clear all;close all
%% load .mat file containing all behavioural data
load ImportAndSaveAllData_Master_DATA_WithRTsNOL.mat
%% Global variables
nSjs=size(FtDiagnRatingPerSj,1);
nAQquestions=numel(Q_AQ_weights);
nSubScales=5;
IMSIze=250;
SelExemplImage=7;
Displ=zeros(250);
nFtsPerIm=1000;
NrIms=10;
nFtPropConsidered=4;
NrBins=5;
CatRef=1:5;
DogRef=6:10;
ImSizeInVDA=22.5;
%% load feature parameters for all 10 images and save them in one FtParamMatrix
cyclesPerVOF=squeeze(FtInf.params.ImGabParams(:,2,:));
DistFromCentre=squeeze(sqrt((abs((FtInf.params.ImGabParams(:,5,:)-.5)).^2)+(abs((FtInf.params.ImGabParams(:,6,:)-.5)).^2)));
GabOris=squeeze(FtInf.params.ImGabParams(:,3,:));
load MinDistFromEye.mat;
SF_DFE_DFC_Ori_FtsParams=zeros(nFtPropConsidered,NrIms*nFtsPerIm);
SF_DFE_DFC_Ori_FtsParams(1,:,:)=cyclesPerVOF(:);
SF_DFE_DFC_Ori_FtsParams(2,:,:)=MinDistFromEye(:);
SF_DFE_DFC_Ori_FtsParams(3,:,:)=DistFromCentre(:);
SF_DFE_DFC_Ori_FtsParams(4,:,:)=GabOris(:);
ImInds=repmat(1:10,1000,1);ImInds=ImInds(:);
CatDogInds=(ImInds<6)+1;
%% remove singel NaN values and z-transform FDi values and vectorize across images
FtDiagnRatingPerSj(isnan(FtDiagnRatingPerSj(:)))=.5;
FtDiagnRatingPerSjNorm=zscore(FtDiagnRatingPerSj,[],2);
FtDiagnRatingPerSjNormVect=FtDiagnRatingPerSjNorm(:,:);


%% Define high and low AQ groups
medAQ=median(AqScoresFromRawData);
LowAQsjs=find(AqScoresFromRawData<=medAQ);
HighAQsjs=find(AqScoresFromRawData>medAQ);

%%  behavioural performance results
%nObsWeights=nObsPerFtPerSj(:)/mean(nObsPerFtPerSj(:));
GrandMean=mean(PerfPerSjIm(:));
PerfPerSj=mean(PerfPerSjIm,2);
PerfSTD=std(PerfPerSj)
PerfPerSj_CatDog=[mean(PerfPerSjIm(:,CatRef),2),mean(PerfPerSjIm(:,DogRef),2)] ;
AQgroup=repmat([ones(numel(LowAQsjs),1);ones(numel(HighAQsjs),1)*2],1,2);
CatDog=[ones(nSjs,1),ones(nSjs,1)*2];
Cat_Dog_Perf=mean(PerfPerSj_CatDog)
[h p ci stats]=ttest(PerfPerSj_CatDog(:,1)-PerfPerSj_CatDog(:,2));
t= stats.tstat
anovan(PerfPerSj_CatDog(:),[AQgroup(:),CatDog(:)],'full')
LAQperf=mean(mean(mean(FtDiagnRatingPerSj(LowAQsjs,:,:)),2),3)
HAQperf=mean(mean(mean(FtDiagnRatingPerSj(HighAQsjs,:,:)),2),3)

%%  Behavioural RT results
GrandMean=nanmean(RTsPerSjIm(:))
RTPerSj=nanmean(RTsPerSjIm(:,:),2);
PerfSTD=std(RTPerSj)
RTPerSj_CatDog=[mean(mean(FtRTPerSj(:,:,CatRef),3),2),mean(mean(FtRTPerSj(:,:,DogRef),3),2)] ;
AQgroup=repmat([ones(numel(LowAQsjs),1);ones(numel(HighAQsjs),1)*2],1,2);
CatDog=[ones(nSjs,1),ones(nSjs,1)*2];
Cat_Dog_RT=mean(RTPerSj_CatDog)
[h p ci stats]=ttest(RTPerSj_CatDog(:,1)-RTPerSj_CatDog(:,2));
t= stats.tstat
anovan(PerfPerSj_CatDog(:),[AQgroup(:),CatDog(:)],'full')
LAQRT=mean(RTPerSj(LowAQsjs))
HAQRT=mean(RTPerSj(HighAQsjs))
[h p ci stats]=ttest2(RTPerSj(LowAQsjs),RTPerSj(HighAQsjs))

%% FIGURE 2
% RFX anova test for AQ interaction with SF, DFE,DFC and Ori effects
AQref=zeros(nSjs,1);AQref(LowAQsjs)=1;AQref(HighAQsjs)=2;
MeanMinMaxVals=zeros(nFtPropConsidered,5,3);
AllFDiVals=zeros(nFtPropConsidered,nSjs*NrBins,1);
AllBinAQpreds=zeros(nFtPropConsidered,nSjs*NrBins,2);
figure(99);
DimNames={'SF','DFE','DFC'};
for dim=1:numel(DimNames)
    FDiVals=zeros(nSjs*NrBins,1);
    BinAQpreds=zeros(nSjs*NrBins,2);
    binSEMs=zeros(NrBins,2);
    binMeans=zeros(NrBins,2);
    [vals sortedFtInds]=sort(SF_DFE_DFC_Ori_FtsParams(dim,:));
    BinInds=ceil(([1:nFtsPerIm*NrIms]*NrBins)/(nFtsPerIm*NrIms));
    count=1;
    for sj=1:nSjs
        for b=1:NrBins
            BinFts=sortedFtInds(BinInds==b);
            FDiVals(count)=mean(FtDiagnRatingPerSjNormVect(sj,BinFts));
            BinAQpreds(count,:)=[b, AQref(sj)];
            if dim==1
                MeanMinMaxVals(dim,b,:) = [mean(vals(BinInds==b)) ,min(vals(BinInds==b)),max(vals(BinInds==b))]./ImSizeInVDA;
            else
                MeanMinMaxVals(dim,b,:) = [mean(vals(BinInds==b)) ,min(vals(BinInds==b)),max(vals(BinInds==b))]*ImSizeInVDA;
            end
            if sj==1
                Displ(:)=squeeze(mean(FtInf.params.gabvects(:,BinFts(ismember(BinFts,find(ImInds==SelExemplImage)))),2));
                figure(88); imagesc(Displ);colormap('gray');axis square;set(gca,'xtick',[]);set(gca,'ytick',[]); set(gca,'LooseInset',get(gca,'TightInset'));saveas(gcf,[DimNames{dim} '_Bin' num2str(b) 'MeanMinMax' num2str(MeanMinMaxVals(dim,b,:)) '.png']);
            end
            count=count+1;
        end
    end
    for b=1:NrBins
        binSEMs(b,1)= std(FDiVals(BinAQpreds(:,1)==b&BinAQpreds(:,2)==1))/sqrt(sum(AQref==1));
        binSEMs(b,2)= std(FDiVals(BinAQpreds(:,1)==b&BinAQpreds(:,2)==2))/sqrt(sum(AQref==2));
        binMeans(b,1)= mean(FDiVals(BinAQpreds(:,1)==b&BinAQpreds(:,2)==1));
        binMeans(b,2)= mean(FDiVals(BinAQpreds(:,1)==b&BinAQpreds(:,2)==2));
    end
    figure(99);
    subplot(1,3,dim);hold on;
    errorbar(binMeans(:,1),binSEMs(:,1),'linewidth',3,'color',[.1 .1 .1; ]) ; xlim([.5 5.5]); ylim([-.02 .038]); ax=gca; set(ax,'Xticklabels',[]);set(ax,'yticklabels',[]);set(ax,'LineWidth',1.5);
    errorbar(binMeans(:,2),binSEMs(:,2),'linewidth',3,'color',[.8 .1 .1; ]) ; xlim([.5 5.5]);ylim([-.02 .038]); ax=gca; set(ax,'Xticklabels',[]);set(ax,'yticklabels',[]);set(ax,'LineWidth',1.5);
    AllFDiVals(dim,:,:)=FDiVals;
    AllBinAQpreds(dim,:,:) =BinAQpreds;
end
% plot selected anova results, 1:3={'SF','DFE','DFC'}
selDim=2;
figure(222);
anovan(AllFDiVals(selDim,:,:)',squeeze(AllBinAQpreds(selDim,:,:)),'full');

%% FIGURE 2
% assess how well individual traits predict SF preference interaction effect size 
%(Make sure this is ran AFTER the above section and not the RT section
FDiPerBinAndSj=zeros(52,NrBins);
for sj=1:52
    SjInds=[1:NrBins]+(NrBins*(sj-1))
    FDiPerBinAndSj(sj,:)=AllFDiVals(1,SjInds);
end
[h p ci stats]=ttest2(FDiPerBinAndSj(HighAQsjs,5),FDiPerBinAndSj(LowAQsjs,5))

B=zeros(nSjs,1);
for sj=1:nSjs
    temp=regress(FDiPerBinAndSj(sj,:)',[1 2 3 4 5 ; 1 1 1 1 1]');
    B(sj)=temp(1,1);
end
SFmod=B;

SFprefModPerTrait=zeros(50,1);
for q=1:nAQquestions
    SFprefModPerTrait(q)= mean(SFmod(TraitPresent(q,:)==1))-mean(SFmod(TraitPresent(q,:)==0));
end

ScInds=repmat(1:5,10,1);
[p,t,stats]=anova1(SFprefModPerTrait,QsSubscales);
[c,m,h,nms] = multcompare(stats,'cType','scheffe');
[vals, inds]=sort(SFprefModPerTrait,'descend');
% five  posthoc t-tests if a trait type gives rise to greater or smaller contribution to H-SF preference
PerSCdata=[SFprefModPerTrait(QsSubscales==1),SFprefModPerTrait(QsSubscales==2),SFprefModPerTrait(QsSubscales==3),SFprefModPerTrait(QsSubscales==4),SFprefModPerTrait(QsSubscales==5)];

for sc=1:5
    sc
    OtherVals=PerSCdata(:,setxor(sc,1:5));
    [h p ci stats]=ttest2(PerSCdata(:,sc),OtherVals(:));
    stats.tstat
    p=p*5 %bonf correction
end
OtherVals=PerSCdata(:,[2 4 5])
[h p ci stats]=ttest2(PerSCdata(:,1),OtherVals(:))
OtherVals=PerSCdata(:,[2 4 5])
[h p ci stats]=ttest2(PerSCdata(:,3),OtherVals(:))

% figure(78);notBoxPlot(SFmodPerTraitType,1:5,'interval' ,'tInterval');
figure(77);
barwitherr(std(PerSCdata)/sqrt(10),mean(PerSCdata))
ylim([-.001 .005]);
set(gca,'YTick',-.001:.001:.004)
set(gca,'Xticklabel',[])
set(gca,'Xtick',[])


[B,STATS] =robustfit(log(QuestionClDiag),SFprefModPerTrait);
figure(55); hold on
[vals inds]=sort(log(QuestionClDiag));
plot(vals,B(1)+[B(2)*log(QuestionClDiag(inds))],'r','LineWidth',3);
scatter(log(QuestionClDiag),SFprefModPerTrait,50,'k','filled')
xlabel('item clinical diagnosticity [log odds ratio)]');ylabel('item-realted high spatial frequency preference increase [a.u.]');
[rho p]=corr(log(QuestionClDiag),SFprefModPerTrait)


%% FIGURE 1c
% check test retest reliability of FDis by assesing the sign. of the split half correlation
% set ComputeNow=1 to recompute (takes a while), and 0 to load precomputed  data
ComputeNow=1;
nCorsPerAv=100;
if ComputeNow==1
    nPerms=10000;
else
    nPerms=1;
end

shCorrVals=zeros(nCorsPerAv,1);
rng('default');
rng(42);
tic
for i=1:nCorsPerAv
    SelDat=FtDiagnRatingPerSjNormVect(randperm(nSjs),:);
    MeanOddVect=mean(SelDat(1:2:end,:));
    MeanEvenVect=mean( SelDat(2:2:end,:));
    shCorrVals(i)=corr(MeanOddVect',MeanEvenVect');
end
toc
obsSHcorr=mean(shCorrVals)

shCorrValsPermed=shCorrVals;
%set t0 1000 or 10000 to recompute
meanPermRhos=zeros(nPerms,1);
for perm=1:nPerms
    perm
    tic
    SelDat=FtDiagnRatingPerSjNorm;
    for sj=1:nSjs
        for im=1:10
            SelDat(sj,:,im)=FtDiagnRatingPerSjNorm(sj,randperm(1000),im);
        end
    end
    for i=1:nCorsPerAv
        SelDat=SelDat(randperm(48),:);
        MeanOddVect=mean( SelDat(1:2:end,:));
        MeanEvenVect=mean( SelDat(2:2:end,:));
        shCorrValsPermed(i)=corr(MeanOddVect',MeanEvenVect');
    end
    meanPermRhos(perm)=mean(shCorrValsPermed);
    toc
end

if ComputeNow==0
    load ObservedAndPermedAvSHcorrVals;
end
[n, x]=hist(meanPermRhos,80);
hist(meanPermRhos,80);
h = findobj(gca,'Type','patch');
h.FaceColor = [0.5 0.5 0.5];
h.EdgeColor = [0.5 0.5 0.5];
line([mean( shCorrVals) obsSHcorr], [0 max(n)],'Color',[.8 .1 .1],'LineWidth',3);
xlim([-.03 .09])
ax=gca;
ax.YTick= 0:100:500;
ax.LineWidth=2;
set(gca, 'TickDir', 'out');

%% RFX anova test for AQ interaction with SF, DFE,DFC and Ori effects, REACTION TIMES
AQref=zeros(nSjs,1);AQref(LowAQsjs)=1;AQref(HighAQsjs)=2;
MeanMinMaxVals=zeros(nFtPropConsidered,5,3);
AllFDiVals=zeros(nFtPropConsidered,nSjs*NrBins,1);
AllBinAQpreds=zeros(nFtPropConsidered,nSjs*NrBins,2);
figure(199);
DimNames={'SF','DFE','DFC'};
for dim=1:numel(DimNames)
    FDiVals=zeros(nSjs*NrBins,1);
    BinAQpreds=zeros(nSjs*NrBins,2);
    binSEMs=zeros(NrBins,2);
    binMeans=zeros(NrBins,2);
    [vals sortedFtInds]=sort(SF_DFE_DFC_Ori_FtsParams(dim,:));
    BinInds=ceil(([1:nFtsPerIm*NrIms]*NrBins)/(nFtsPerIm*NrIms));
    count=1;
    for sj=1:nSjs
        for b=1:NrBins
            BinFts=sortedFtInds(BinInds==b);
            FDiVals(count)=mean(ResponseSpeedNormVect(sj,BinFts));
            BinAQpreds(count,:)=[b, AQref(sj)];
            MeanMinMaxVals(dim,b,:) = [mean(vals(BinInds==b)) ,min(vals(BinInds==b)),max(vals(BinInds==b))];
            count=count+1;
        end
    end
    for b=1:NrBins
        binSEMs(b,1)= std(FDiVals(BinAQpreds(:,1)==b&BinAQpreds(:,2)==1))/sqrt(sum(AQref==1));
        binSEMs(b,2)= std(FDiVals(BinAQpreds(:,1)==b&BinAQpreds(:,2)==2))/sqrt(sum(AQref==2));
        binMeans(b,1)= mean(FDiVals(BinAQpreds(:,1)==b&BinAQpreds(:,2)==1));
        binMeans(b,2)= mean(FDiVals(BinAQpreds(:,1)==b&BinAQpreds(:,2)==2));
    end
    figure(199);
    subplot(1,3,dim);hold on;
    errorbar(binMeans(:,1),binSEMs(:,1),'linewidth',3,'color',[.1 .1 .1; ]) ;  ax=gca; set(ax,'Xticklabels',[]);set(ax,'LineWidth',1.5);
    errorbar(binMeans(:,2),binSEMs(:,2),'linewidth',3,'color',[.8 .1 .1; ]) ;  ax=gca; set(ax,'Xticklabels',[]);set(ax,'LineWidth',1.5);
    AllFDiVals(dim,:,:)=FDiVals;
    AllBinAQpreds(dim,:,:) =BinAQpreds;
end
% plot selected anova results
selDim=3;
figure(2222);
anovan(AllFDiVals(selDim,:,:)',squeeze(AllBinAQpreds(selDim,:,:)),'full');
%[c,m,h,nms] = multcompare(stats,'CType','lsd')
% checking if AQxSF interaction depends on reaction times
[rho p]=corr(SFmod,nanmean(FtRTPerSj(:,:),2))

rts=nanmean(FtRTPerSj(:,:),2);
[rho p]=corr(SFmod,rts);
scatter(SFmod,rts);
[B,STATS] =robustfit(SFmod,rts);
[vals inds]=sort(SFmod);
figure(1000); hold on
plot(vals,B(1)+[B(2)*SFmod(inds)],'r','LineWidth',3);
scatter(SFmod,rts,50,'k','filled')
xlabel('spatial frequency preference modulation');ylabel('reaction times');

%% check test retest reliability of RT-FDis by assesing the sign. of the split half correlation
nCorsPerAv=100;
shCorrVals=zeros(nCorsPerAv,1);
rng('default');
rng(42);
tic
for i=1:nCorsPerAv
    SelDat=ResponseSpeedNormVect(randperm(nSjs),:);
    MeanOddVect=mean(SelDat(1:2:end,:));
    MeanEvenVect=mean( SelDat(2:2:end,:));
    shCorrVals(i)=corr(MeanOddVect',MeanEvenVect');
end
toc
obsSHcorr=mean(shCorrVals)
shCorrValsPermed=shCorrVals;
nPerms=10000;  %set t0 1000 or 10000 to recompute
meanPermRhos=zeros(nPerms,1);
for perm=1:nPerms
    perm
    tic
    SelDat=ResponseSpeedNorm;
    for sj=1:nSjs
        for im=1:10
            SelDat(sj,:,im)=ResponseSpeedNorm(sj,randperm(1000),im);
        end
    end
    for i=1:nCorsPerAv
        SelDat=SelDat(randperm(48),:);
        MeanOddVect=mean( SelDat(1:2:end,:));
        MeanEvenVect=mean( SelDat(2:2:end,:));
        shCorrValsPermed(i)=corr(MeanOddVect',MeanEvenVect');
    end
    meanPermRhos(perm)=mean(shCorrValsPermed);
    toc
end
%save('ObservedAndPermedAvSHcorrVals_RT.mat','meanPermRhos','shCorrVals');
%%uncomment this line to save new bootstrap results
load ObservedAndPermedAvSHcorrVals_RT.mat % comment this line to recompute
figure(444);hold on;
[n, x]=hist(meanPermRhos,80);
hist(meanPermRhos,80);
h = findobj(gca,'Type','patch');
h.FaceColor = [0.5 0.5 0.5];
h.EdgeColor = [0.5 0.5 0.5];
line([mean( shCorrVals) obsSHcorr], [0 max(n)],'Color',[.8 .1 .1],'LineWidth',3);
xlim([-.03 .09])
ax=gca;
ax.YTick= 0:100:500;
ax.LineWidth=2;
set(gca, 'TickDir', 'out');
mean( meanPermRhos>obsSHcorr)
%% IMAGES SAVED FOR VISUALIZATION PURPOSES

%% Show top and bottom 200 features for the two best cat and dog images for the high and low AQ groups seperately and save to disk
SelIms=[2 5 7 10];
for im=1:numel(SelIms)
    [vals, inds]=sort(mean((FtDiagnRatingPerSjNorm(:,:,SelIms(im)))));
    Displ(:)=squeeze(mean(FtInf.params.gabvects(:,inds(1:200),SelIms(im)),2));
    figure(111); imagesc(Displ);colormap('gray');axis square;set(gca,'xtick',[]);set(gca,'ytick',[]); set(gca,'LooseInset',get(gca,'TightInset'));saveas(gcf,['WorstFtsOveral' num2str(SelIms(im)) '.png']);
    Displ(:)=squeeze(mean(FtInf.params.gabvects(:,inds(801:1000),SelIms(im)),2));
    figure(111); imagesc(Displ);colormap('gray');axis square;set(gca,'xtick',[]);set(gca,'ytick',[]); set(gca,'LooseInset',get(gca,'TightInset'));saveas(gcf,['BestFtsOveral' num2str(SelIms(im)) '.png']);
    
    [vals, inds]=sort(mean((FtDiagnRatingPerSjNorm(LowAQsjs,:,SelIms(im)))));
    Displ(:)=squeeze(mean(FtInf.params.gabvects(:,inds(1:200),SelIms(im)),2));
    figure(111); imagesc(Displ);colormap('gray');axis square;set(gca,'xtick',[]);set(gca,'ytick',[]); set(gca,'LooseInset',get(gca,'TightInset'));saveas(gcf,['WorstFtsLAQ' num2str(SelIms(im)) '.png']);
    Displ(:)=squeeze(mean(FtInf.params.gabvects(:,inds(801:1000),SelIms(im)),2));
    figure(111); imagesc(Displ);colormap('gray');axis square;set(gca,'xtick',[]);set(gca,'ytick',[]); set(gca,'LooseInset',get(gca,'TightInset'));saveas(gcf,['BestFtsLAQ' num2str(SelIms(im)) '.png']);
    
    [vals, inds]=sort(mean((FtDiagnRatingPerSjNorm(HighAQsjs,:,SelIms(im)))));
    Displ(:)=squeeze(mean(FtInf.params.gabvects(:,inds(1:200),SelIms(im)),2));
    figure(111); imagesc(Displ);colormap('gray');axis square;set(gca,'xtick',[]);set(gca,'ytick',[]); set(gca,'LooseInset',get(gca,'TightInset'));saveas(gcf,['WorstFtsHAQ' num2str(SelIms(im)) '.png']);
    Displ(:)=squeeze(mean(FtInf.params.gabvects(:,inds(801:1000),SelIms(im)),2));
    figure(111); imagesc(Displ);colormap('gray');axis square;set(gca,'xtick',[]);set(gca,'ytick',[]); set(gca,'LooseInset',get(gca,'TightInset'));saveas(gcf,['BestFtsHAQ' num2str(SelIms(im)) '.png']);
end

%% Save 20 90 feature images for Figure 1
Displ=zeros(250);
rng(42)
for i=1:20
    SelFts=randperm(1000);
    Displ(:)=squeeze(mean(FtInf.params.gabvects(:,SelFts(1:90),7),2));
    figure(1); imagesc(Displ);colormap('gray');axis square;set(gca,'xtick',[]);set(gca,'ytick',[]); set(gca,'LooseInset',get(gca,'TightInset'));saveas(gcf,['Im7Recontrtuction' num2str(i) '.png']);
end


%% ASSESSING IF AQ CORRELATES WITH THE PREFERED SF


%% obtain prefered SF with sliding window
[vals SFsortedInds]=sort(SF_DFE_DFC_Ori_FtsParams(1,:));
WindWidth=3500;
stepsize=10
Wstart=WindWidth+1;
Wend=10000-WindWidth;
AvFDiPerWind=zeros(nSjs,numel(Wstart:stepsize:Wend));
WinSFs=zeros(numel(Wstart:stepsize:Wend),1);
for sj=1:nSjs
    count=1;
    sj
    for i=Wstart:stepsize:Wend
        WindowInds=SFsortedInds(i-WindWidth:i+WindWidth);
        WinSFs(count)=mean(vals(WindowInds));
        AvFDiPerWind(sj,count)=mean(FtDiagnRatingPerSjNorm(sj,WindowInds));
        count=count+1;
    end
end
mean(PrefSFs)
std(PrefSFs)
figure; plot(AvFDiPerWind(40:43,:)');

[vals PrefSFs]=max(AvFDiPerWind,[],2);
[rho p]=corr(AqScoresFromRawData',PrefSFs,'type','spearman')

figure;scatter(AqScoresFromRawData', PrefSFs)

% per im

WindWidth=90;
stepsize=2
Wstart=WindWidth+1;
Wend=1000-WindWidth;
AvFDiPerWind=zeros(nSjs,im,numel(Wstart:stepsize:Wend));
WinSFs=zeros(numel(Wstart:stepsize:Wend),1);
for sj=1:nSjs
    for im=1:10
        [vals SFsortedInds]=sort(FtInf.params.ImGabParams(:,2,im));
        count=1;
        sj
        for i=Wstart:stepsize:Wend
            WindowInds=SFsortedInds(i-WindWidth:i+WindWidth);
            WinSFs(count)=mean(vals(WindowInds));
            AvFDiPerWind(sj,im,count)=mean(squeeze(FtDiagnRatingPerSjNorm(sj,WindowInds,im)));
            count=count+1;
        end
    end
end

AvFDiPerWind_ImAv=squeeze(mean(AvFDiPerWind,2));
figure; plot(squeeze(AvFDiPerWind(40:43,im,:))');

[vals PrefSFs]=max(AvFDiPerWind_ImAv,[],2);
[rho p]=corr(AqScoresFromRawData',PrefSFs,'type','spearman')

figure;scatter(AqScoresFromRawData', PrefSFs)




%%


%NrBinsHigh=1000;
BinInds=ceil(([1:nFtsPerIm]*NrBinsHigh)/(nFtsPerIm));
UniqueSFs=unique(FtInf.params.ImGabParams(:,2,im));
AvFDiPerBin=zeros(nSjs,10,numel(UniqueSFs));
AvSFperBin=zeros(numel(UniqueSFs),1);
MaxSFbins=zeros(nSjs,10);
for sj=1:nSjs
    for im=1:10
        [vals sortedFtInds]=sort(squeeze(FtInf.params.ImGabParams(:,2,im)));
        for bin=1:numel(UniqueSFs)
            binRef=FtInf.params.ImGabParams(:,2,im)==UniqueSFs(bin);
            AvFDiPerBin(sj,im,bin)=mean(squeeze(FtDiagnRatingPerSjNorm(sj,binRef,im)));
            % AvSFperBin(bin)=mean(vals(BinInds==bin))
        end
        [vals MaxSFbin]=max(squeeze(AvFDiPerBin(sj,im,:)));
        MaxSFbins(sj,im)=MaxSFbin;
    end
end



[rho p]=corr(AqScoresFromRawData', mean(MaxSFbins,2),'type','spearman')

figure;scatter(AqScoresFromRawData', mean(MaxSFbins,2))






%% EXPERIMENTAL ANALYSES
AQgroupInds=ones(52)*3;
AQgroupInds(1:numel(LowAQsjs),1:numel(LowAQsjs))=1;
AQgroupInds(numel(LowAQsjs)+1:end,numel(LowAQsjs)+1:end)=2;
AQgroupInds(eye(52)==1)=0;

%% Use odd and even data to get rid of uninformative features and classify using the remaining 3000+, 90%!!!!!
SHC=corr(mean(FtDiagnRatingPerSjNormVect(1:2:end,:))',mean(FtDiagnRatingPerSjNormVect(2:2:end,:))');
%SelFts=ones(10000,1);

rng(42);
ftOrder=randperm(10000);
SHC=corr(FtDiagnRatingPerSjEvenNorm(:),FtDiagnRatingPerSjOddNorm(:));
remFts=[];
for i=1:10000
    i
    remFts=[remFts;ftOrder(i)];
    FtsSelTest=setxor(1:10000,remFts);
    FtDiagnRatingPerSjEvenNormTest=FtDiagnRatingPerSjEvenNorm(:,FtsSelTest);
    FtDiagnRatingPerSjOddNormTest=FtDiagnRatingPerSjOddNorm(:,FtsSelTest);
    SHCtest=corr(FtDiagnRatingPerSjEvenNormTest(:),FtDiagnRatingPerSjOddNormTest(:));
    if SHCtest>=SHC
        SHC= SHCtest;
    else
        remFts(end)=[];
    end
end

nPerms=10;
SelFts=setxor(1:10000,remFts);
PermPerfMem=zeros(nPerms,1);
PermHitRatioMem(perm)=zeros(nPerms,1);
PermCorrRejRatioMem=zeros(nPerms,1);
PermFPratioMem=zeros(nPerms,1);

for perm=1:nPerms
    sjSel=randperm(27);
    EqObsPerGroupDat=FtDiagnRatingPerSjNormVect([LowAQsjs( sjSel(1:25)), HighAQsjs],SelFts);
    AqGroupLabels=[-ones(25,1);ones(25,1)];
    perfMem=zeros(5,1);
    HitRatioMem=zeros(5,1);
    FPratioMem=zeros(5,1);
    CorrRejRationMem=zeros(5,1);
    for fold=1:5
        % fold
        testref=[1:5 26:30]+(5*(fold-1));
        trainref=setxor(1:50,testref);
        TrainDat= EqObsPerGroupDat(trainref,:);
        TrainLabels= AqGroupLabels(trainref);
        TestDat=EqObsPerGroupDat(testref,:);
        TestLabels= AqGroupLabels(testref);
        svm=fitcsvm(EqObsPerGroupDat(trainref, :),TrainLabels, 'KernelFunction','linear' );
        class = predict(svm,EqObsPerGroupDat(testRef, :));
        perfMem(fold)=mean(class==TestLabels);
        HitRatioMem(fold)=sum(TestLabels==1&class==1)/sum(TestLabels==1);
        CorrRejRationMem(fold)=sum(TestLabels==-1&class==-1)/sum(TestLabels==-1);
        FPratioMem(fold)=sum(TestLabels==-1&class==1)/sum(TestLabels==-1);
    end
    PermPerfMem(perm)=mean( perfMem);
    PermHitRatioMem(perm)=mean( HitRatioMem);
    PermCorrRejRatioMem(perm)=mean( CorrRejRationMem);
    PermFPratioMem(perm)=mean(FPratioMem);
    mean( perfMem);
end
mean(PermPerfMem)
CORR_HIT_PROP= mean(PermHitRatioMem)
CORR_REJ_PROP =mean(PermCorrRejRatioMem)
FALSE_POSITIVE_PROP=mean( PermFPratioMem)






















































































%% use kmeans to group together features with similar location,SF and orientation and use these as SVM features
nSpatClusters=15;
ClFeatures=zeros(nSjs,10,nSpatClusters);
for im=1:10
    tic
    im
    XYcrds=squeeze(FtInf.params.ImGabParams(:,5:6,im));
    Spatdists=pdist(XYcrds);
    Spatdists=Spatdists/max(Spatdists);
    SFs=unique(FtInf.params.ImGabParams(:,2,im));
    SForder=FtInf.params.ImGabParams(:,2,im);
    for sf=1:numel(SFs)
        SForder(FtInf.params.ImGabParams(:,2,im)==SFs(sf))=sf;
    end
    SFdists=pdist(SForder)/29;
    Oris=FtInf.params.ImGabParams(:,3,im);
    Oris=deg2rad(Oris*2);
    OriDists=zeros(1000,1000);
    for i=1:1000
        for j=1:1000
            OriDists(i,j)=abs(angdiff(Oris(i),Oris(j)));
        end
    end
    OriDists=squareform(OriDists)/pi;
    AvFtDists=(OriDists*3)+(SFdists*3)+(Spatdists*0);
    FtCoords=mdscale(AvFtDists,2,'Criterion','metricsstress');
    rng(2);
    IDX = kmeans(FtCoords,nSpatClusters);
    %     Displ(:)=sum(FtInf.params.gabvects( :,IDX==5,im),2);figure;imagesc(Displ)
    %
    for sj=1:52
        for cl=1:nSpatClusters
            ClFeatures(sj,im,cl)=median(FtDiagnRatingPerSjNorm(sj,IDX==cl,im));
        end
    end
    toc
end

SFprofRDM=1-corr(ClFeatures([LowAQsjs,HighAQsjs],:)');
SFprofRDM(eye(52)==1)=NaN;
figure;imagesc(SFprofRDM);
[h p ci stats]=ttest2(SFprofRDM(AQgroupInds==3),SFprofRDM(AQgroupInds<3))

PermPerfMem=zeros(1,5);
for perm=1:5
    sjSel=randperm(27);
    EqObsPerGroupDat=ClFeatures([LowAQsjs( sjSel(1:25)), HighAQsjs],:);
    %EqObsPerGroupDat=Locprofile([LowAQsjs( sjSel(1:25)), HighAQsjs],:);
    AqGroupLabels=[-ones(25,1);ones(25,1)];
    perfMem=zeros(5,1);
    for fold=1:5
        fold
        testRef=[1:5 26:30]+(5*(fold-1));
        trainref=setxor(1:50,testRef);
        %[B STATS]=lassoglm(EqObsPerGroupDat(trainref,:),AqGroupLabels(trainref));
        svm=fitcsvm(EqObsPerGroupDat(trainref,:),AqGroupLabels(trainref), 'KernelFunction','linear' );
        class = predict(svm,EqObsPerGroupDat(testRef,:));
        perfMem(fold)=mean(class==AqGroupLabels(testRef));
    end
    PermPerfMem(perm)=mean( perfMem);
    mean( perfMem);
end
mean(PermPerfMem)





%% create an average FDi value vector for each SF and Ori (WORKS!!!, on its own), somehow add position... grid version
SFs=unique(FtInf.params.ImGabParams(:,2));
SFsBinInds=floor([1:29]/6)+1;
Oris=unique(floor(FtInf.params.ImGabParams(:,3)/20));
%nSpatClusters=5;
SFprofile=zeros(nSjs,10,nSpatClusters);
Oriprofile=zeros(nSjs,10,numel(Oris));
clsizes=[2 3 5];
Locprofile=zeros(nSjs,10,sum(clsizes));
for im=1:10
    XYcrds=squeeze(FtInf.params.ImGabParams(:,5:6,im));
    IDX = kmeans(XYcrds,nSpatClusters);
    
    for cl=1:numel(clsizes)
        IDX(:,cl) = kmeans(XYcrds,clsizes(cl));
    end
    
    for sj=1:nSjs
        for sf=1:numel(SFs)
            binSFs=FtInf.params.ImGabParams(:,2,im)==SFs(sf);
            SFprofile(sj,im,sf)=median(FtDiagnRatingPerSjNorm(sj,binSFs,im));
        end
        for ori=1:numel(Oris)
            imOris=floor(FtInf.params.ImGabParams(:,3)/20);
            Oriprofile(sj,im,ori)=median(FtDiagnRatingPerSjNorm(sj,imOris==Oris(ori),im));
        end
        %figure; hold on;
        count=1;
        for cl=1:numel(clsizes)
            for spcl=1:clsizes(cl)
                Locprofile(sj,im,count)=median(FtDiagnRatingPerSjNorm(sj,IDX(:,cl)==spcl,im));
                count=count+1;
                % scatter( XYcrds(IDX==spcl,1),XYcrds(IDX==spcl,2));
            end
        end
    end
end
figure;imagesc(squeeze(mean(SFprofile)))
SFprofileAv=squeeze(mean(SFprofile,2));
SFprofRDM=1-corr(SFprofile([LowAQsjs,HighAQsjs],:)');
SFprofRDM(eye(52)==1)=NaN;
figure;imagesc(SFprofRDM);
[h p ci stats]=ttest2(SFprofRDM(AQgroupInds==3),SFprofRDM(AQgroupInds<3))

figure;imagesc(squeeze(mean(Oriprofile)))
OriprofileAv=squeeze(mean(Oriprofile,2));
OriprofRDM=1-corr(Oriprofile([LowAQsjs,HighAQsjs],:)');
OriprofRDM(eye(52)==1)=NaN;
figure;imagesc(OriprofRDM);
[h p ci stats]=ttest2(OriprofRDM(AQgroupInds==3),OriprofRDM(AQgroupInds<3))

figure;imagesc(squeeze(mean(Locprofile)))
LocprofileAv=squeeze(mean(Locprofile,2));
LocprofRDM=1-corr(Locprofile([LowAQsjs,HighAQsjs],:)');
LocprofRDM(eye(52)==1)=NaN;
figure;imagesc(LocprofRDM);
[h p ci stats]=ttest2(LocprofRDM(AQgroupInds==3),LocprofRDM(AQgroupInds<3))

%
%SFORI_Info=[Oriprofile(:,:)];
%SFORI_Info=[SFprofile(:,:)];
%SFORI_Info=[Locprofile(:,:)];
%SFORI_Info=[Locprofile(:,:),Oriprofile(:,:)];
%SFORI_Info=[SFprofile(:,:),Locprofile(:,:)];
% SFORI_Info=[SFprofile(:,:),Oriprofile(:,:)];
SFORI_Info=[SFprofile(:,:),Oriprofile(:,:),Locprofile(:,:)];
SFOriprofRDM=1-corr([SFprofile([LowAQsjs,HighAQsjs],:)';Oriprofile([LowAQsjs,HighAQsjs],:)'] );
SFOriprofRDM(eye(52)==1)=NaN;
figure;imagesc(SFOriprofRDM);
[h p ci stats]=ttest2(SFOriprofRDM(AQgroupInds==3),SFOriprofRDM(AQgroupInds<3))

% [COEFF, SCORE, LATENT]=pca(SFORI_Info);
% SFORI_Info=SCORE;

PermPerfMem=zeros(5,1);
for perm=1:1
    sjSel=randperm(27);
    EqObsPerGroupDat=SFORI_Info([LowAQsjs( sjSel(1:25)), HighAQsjs],:);
    %EqObsPerGroupDat=Locprofile([LowAQsjs( sjSel(1:25)), HighAQsjs],:);
    AqGroupLabels=[-ones(25,1);ones(25,1)];
    perfMem=zeros(5,1);
    for fold=1:5
        fold
        testRef=[1:5 26:30]+(5*(fold-1));
        trainref=setxor(1:50,testRef);
        %[B STATS]=lassoglm(EqObsPerGroupDat(trainref,:),AqGroupLabels(trainref));
        svm=fitcsvm(EqObsPerGroupDat(trainref,:),AqGroupLabels(trainref), 'KernelFunction','linear' );
        class = predict(svm,EqObsPerGroupDat(testRef,:));
        perfMem(fold)=mean(class==AqGroupLabels(testRef));
    end
    PermPerfMem(perm)=mean( perfMem);
    mean( perfMem);
end
mean(PermPerfMem)

%sign. testing
PermPerfMem=zeros(1000,1);
for p=1:1000
    sjSel=randperm(27);
    EqObsPerGroupDat=SFORI_Info([LowAQsjs( sjSel(1:25)), HighAQsjs],:);
    EqObsPerGroupDat=EqObsPerGroupDat(randperm(50),:);
    %EqObsPerGroupDat=Locprofile([LowAQsjs( sjSel(1:25)), HighAQsjs],:);
    AqGroupLabels=[-ones(25,1);ones(25,1)];
    perfMem=zeros(5,1);
    for fold=1:5
        testRef=[1:5 26:30]+(5*(fold-1));
        trainref=setxor(1:50,testRef);
        svm=fitcsvm(EqObsPerGroupDat(trainref,:),AqGroupLabels(trainref), 'KernelFunction','linear' );
        class = predict(svm,EqObsPerGroupDat(testRef,:));
        perfMem(fold)=mean(class==AqGroupLabels(testRef));
    end
    PermPerfMem(p)=mean( perfMem);
    mean( perfMem);
end
mean(PermPerfMem)
mean(PermPerfMem>.72)







%B= mnrfit(SFORI_Info,AqScoresFromRawData')

numel(clsizes)

%% asess median dists for worst to best feature bins (WORKS!!!)
nBins=5;
PropNb=zeros(nSjs,10,nBins);
PropNbSlope=zeros(nSjs,nBins);

for im=1:10
    Xcrds=squeeze(FtInf.params.ImGabParams(:,5,im));
    Ycrds=squeeze(FtInf.params.ImGabParams(:,6,im));
    %EuclDists=pdist([
    for sj=1:52
        [vals, inds]=sort(FtDiagnRatingPerSjNorm(sj,:,im));
        for bin=1:nBins
            range=[1:(1000/nBins)]+ ((bin-1)*(1000/nBins));
            dists=pdist([Xcrds(inds(range)),Ycrds(inds(range))]);
            %  PropNb(sj,im,bin)=mean(dists<.333333333333);
            PropNb(sj,im,bin)=median(dists);
            
        end
        [B,BINT]=regress(squeeze(PropNb(sj,im,:)),[[1:nBins]',ones(nBins,1)]);
        PropNbSlope(sj,im)=B(1);
    end
end

GrandAv=squeeze(mean(mean(PropNb),2));
figure;plot(GrandAv);
PropNB_RDM=1-corr(PropNbSlope([LowAQsjs, HighAQsjs],:)');
%[h p ci stats]=ttest2(PropNB_RDM(AQgroupInds==2),PropNB_RDM(AQgroupInds==1))
[h p ci stats]=ttest2(PropNB_RDM(AQgroupInds==3),PropNB_RDM(AQgroupInds<3))
figure;imagesc(PropNB_RDM);
[h p ci stats]=ttest2(PropNbSlope(HighAQsjs,:), PropNbSlope(LowAQsjs,:))

PermPerfMem=zeros(5,1);
for perm=1:30
    sjSel=randperm(27);
    %EqObsPerGroupDat=PropNb([LowAQsjs( sjSel(1:25)), HighAQsjs],:)
    EqObsPerGroupDat=PropNbSlope([LowAQsjs( sjSel(1:25)), HighAQsjs],:);
    % EqObsPerGroupDat=[EqObsPerGroupDat,[SFmod(HighAQsjs,:);SFmod(LowAQsjs(1:25),:)]];
    EqObsPerGroupDat=[EqObsPerGroupDat,[SFmod(LowAQsjs(sjSel(1:25)),:);SFmod(HighAQsjs,:)]];
    AqGroupLabels=[-ones(25,1);ones(25,1)];
    perfMem=zeros(5,1);
    for fold=1:5
        testRef=[1:5 26:30]+(5*(fold-1));
        trainref=setxor(1:50,testRef);
        svm=fitcsvm(EqObsPerGroupDat(trainref,:),AqGroupLabels(trainref), 'KernelFunction','linear' );
        class = predict(svm,EqObsPerGroupDat(testRef,:));
        perfMem(fold)=mean(class==AqGroupLabels(testRef));
    end
    PermPerfMem(perm)=mean( perfMem);
    mean( perfMem);
end
mean(PermPerfMem)

[B,STATS] = lassoglm(X,AqScoresFromRawData)



%% Create a Ori and SF features(five bins for each) for each spatial cluster (n.. kmeans), kinda WORKS
nSpatClusters=15
nBins=5;
FtMaps=zeros(nSjs,10,nSpatClusters,2*nBins);
for im=1:10
    XYcrds=squeeze(FtInf.params.ImGabParams(:,5:6,im));
    rng default;
    IDX = kmeans(XYcrds,nSpatClusters);
    for c=1:nSpatClusters
        BinsInds=ceil(nBins*([1:sum(IDX==c)]/sum(IDX==c)));
        SFs=FtInf.params.ImGabParams(IDX==c,2,im);
        [vals SFinds]=sort(SFs);
        Oris=FtInf.params.ImGabParams(IDX==c,3,im);
        [vals Oriinds]=sort(Oris);
        for b=1:nBins
            for sj=1:nSjs
                FtMaps(sj,im,c,b)=median(FtDiagnRatingPerSjNorm(sj,SFinds(BinsInds==b),im));
                FtMaps(sj,im,c,b+nBins)=median(FtDiagnRatingPerSjNorm(sj,Oriinds(BinsInds==b),im));
            end
        end
    end
end

SFprofRDM=1-corr(FtMaps([LowAQsjs,HighAQsjs],:)');
SFprofRDM(eye(52)==1)=NaN;
figure;imagesc(SFprofRDM);
[h p ci stats]=ttest2(SFprofRDM(AQgroupInds==3),SFprofRDM(AQgroupInds<3))

PermPerfMem=zeros(1,5);
for perm=1:5
    perm
    sjSel=randperm(27);
    EqObsPerGroupDat=FtMaps([LowAQsjs( sjSel(1:25)), HighAQsjs],:);
    %EqObsPerGroupDat=FtDiagnRatingPerSjNorm([LowAQsjs( sjSel(1:25)), HighAQsjs],:);
    
    %EqObsPerGroupDat=Locprofile([LowAQsjs( sjSel(1:25)), HighAQsjs],:);
    AqGroupLabels=[-ones(25,1);ones(25,1)];
    perfMem=zeros(5,1);
    for fold=1:5
        fold
        testRef=[1:5 26:30]+(5*(fold-1));
        trainref=setxor(1:50,testRef);
        %[B STATS]=lassoglm(EqObsPerGroupDat(trainref,:),AqGroupLabels(trainref));
        svm=fitcsvm(EqObsPerGroupDat(trainref,:),AqGroupLabels(trainref), 'KernelFunction','linear' );
        class = predict(svm,EqObsPerGroupDat(testRef,:));
        perfMem(fold)=mean(class==AqGroupLabels(testRef));
    end
    PermPerfMem(perm)=mean( perfMem);
    mean( perfMem);
end
mean(PermPerfMem)






%% rank features according to FDi and create a distance based RDM
RDMs=zeros(52,10,((1000*1000)-1000)/2);
for sj=1:nSjs
    for im=1:10
        
        [vals inds]=sort(FtDiagnRatingPerSjNorm(sj,:,im));
        Xcrds=squeeze(FtInf.params.ImGabParams(:,5,im));
        Ycrds=squeeze(FtInf.params.ImGabParams(:,6,im));
        RDMs(sj,im,:)=pdist([Xcrds(inds),Ycrds(inds)]);
    end
end

GrandAvRDM=squeeze(mean(mean(RDMs),2));
GrandAvRDM(eye(1000)==1)=NaN;
figure; imagesc(GrandAvRDM);

size(RDMs(:,:))
test=1-corr(RDMs([LowAQsjs,HighAQsjs],:)');
test(eye(52)==1)=NaN;
imagesc(test)
[h p ci stats]=ttest2(test(AQgroupInds==3),test(AQgroupInds<3))




%% Compute prefered an average FDI grid-map for each orientation and SF and assess inof about AQ group
GridN=3;
SFs=unique(FtInf.params.ImGabParams(:,2));
Oris=unique(FtInf.params.ImGabParams(:,3));
GridAvFDisPerOri=zeros(nSjs,10,GridN,GridN,18);
GridAvFDisPerSF=zeros(nSjs,10,GridN,GridN,29);

for im=1:10
    im
    for sj=1:nSjs
        
        Xcrds=squeeze(FtInf.params.ImGabParams(:,5,im));
        Ycrds=squeeze(FtInf.params.ImGabParams(:,6,im));
        for x=0:1/GridN:1-(1/GridN)
            for y=0:1/GridN:1-(1/GridN)
                GridFts=Xcrds>x&Xcrds<x+(1/GridN)&Ycrds>y&Ycrds<y+(1/GridN);
                for sf=1:29
                    selFts=FtInf.params.ImGabParams(:,2,im)==SFs(sf)&GridFts;
                    if sum(selFts)>0
                        GridAvFDisPerSF(sj,im,round(1+(x*GridN)),round(1+(y*GridN)),sf)=mean(FtDiagnRatingPerSjNorm(sj,selFts,im));
                    end
                end
                for ori=1:numel(Oris)
                    selFts=FtInf.params.ImGabParams(:,3,im)==Oris(ori)&GridFts;
                    if sum(selFts)>0
                        GridAvFDisPerOri(sj,im,round(1+(x*GridN)),round(1+(y*GridN)),sf)=mean(FtDiagnRatingPerSjNorm(sj,selFts,im));
                    end
                end
                
                
            end
        end
    end
end

SFgridPrefFts=GridAvFDisPerSF(:,:);
SFgridPrefFts(:,std(SFgridPrefFts)==0)=[] ;

SFgridPrefFts_RDM=1-corr(SFgridPrefFts([LowAQsjs HighAQsjs],:)');
SFgridPrefFts_RDM(eye(52)==1)=NaN;
figure;imagesc(SFgridPrefFts_RDM);
[h p ci stats]=ttest2(SFgridPrefFts_RDM(AQgroupInds==3),SFgridPrefFts_RDM(AQgroupInds<3))

OrigridPrefFts=GridAvFDisPerSF(:,:);
OrigridPrefFts(:,std(SFgridPrefFts)==0)=[] ;

OrigridPrefFts_RDM=1-corr(OrigridPrefFts([LowAQsjs HighAQsjs],:)');
OrigridPrefFts_RDM(eye(52)==1)=NaN;
figure;imagesc(OrigridPrefFts_RDM);
[h p ci stats]=ttest2(OrigridPrefFts_RDM(AQgroupInds==3),OrigridPrefFts_RDM(AQgroupInds<3))


%TopFtsClustering=squeeze(mean(PropNb(:,:,end),2))-squeeze(mean(PropNb(:,:,1),2));
TopFtsClustering=mean(PropNbSlope,2);

[h p ci stats]=ttest2(TopFtsClustering(LowAQsjs),TopFtsClustering(HighAQsjs))
[rho p]=corr(TopFtsClustering,AqScoresFromRawData')
figure;scatter(TopFtsClustering,AqScoresFromRawData')


%% assess 2D autocorrlation differences
GridN=200;
GridAvFDis=zeros(nSjs,10,GridN,GridN);
for im=1:10
    im
    Xcrds=squeeze(FtInf.params.ImGabParams(:,5,im));
    Ycrds=squeeze(FtInf.params.ImGabParams(:,6,im));
    for x=0:1/GridN:1-(1/GridN)
        for y=0:1/GridN:1-(1/GridN)
            GridFts=find(Xcrds>x&Xcrds<x+(1/GridN)&Ycrds>y&Ycrds<y+(1/GridN));
            if numel(GridFts)>0;
                GridAvFDis(:,im,round(1+(x*GridN)),round(1+(y*GridN)))=mean(FtDiagnRatingPerSjNorm(:,GridFts,im),2);
                % GridAvFDis=[GridAvFDis,mean(FtDiagnRatingPerSjNorm(:,GridFts,im),2)];
            end
        end
    end
end

ACs=zeros(nSjs,10);
for sj=1:52
    for im=1:10
        %AC=autocorr2d( squeeze(GridAvFDis(sj,im,:,:)));
        %ACs(sj,im)=median(AC(:));
        %stdMap=stdfilt(squeeze(GridAvFDis(sj,im,:,:)),strel('disk',8,8).Neighborhood );
        stdMap=stdfilt(squeeze(GridAvFDis(sj,im,:,:)),ones(25));
        ACs(sj,im)=std(stdMap(:));
    end
end
ACs(ACs==0)=NaN;
meanACs=nanmean(ACs,2);
figure;imagesc(ACs([LowAQsjs,HighAQsjs],:))
[h p ci stats]=ttest2(meanACs(LowAQsjs),meanACs(HighAQsjs))
[rho p]=corr(meanACs,AqScoresFromRawData')
figure;scatter(meanACs,AqScoresFromRawData')


%% test if spatial correlation of FDi values is affected by AQ group
SCs=zeros(nSjs,10);
for im=1:10
    im
    Xcrds=squeeze(FtInf.params.ImGabParams(:,5,im));
    Ycrds=squeeze(FtInf.params.ImGabParams(:,6,im));
    AllFtEuclDists=pdist([Xcrds, Ycrds]);
    NearByFtsInds=AllFtEuclDists>.02&AllFtEuclDists<.6;
    for sj=1:nSjs
        AllFtFDiDists=pdist(FtDiagnRatingPerSjNorm(sj,:,im)');
        %figure;scatter( log(AllFtEuclDists(NearByFtsInds)'),AllFtFDiDists(NearByFtsInds)')
        [rho p]=corr(log(AllFtEuclDists(NearByFtsInds)'),AllFtFDiDists(NearByFtsInds)');
        SCs(sj,im)=rho;
    end
end
figure;imagesc(SCs([LowAQsjs,HighAQsjs],:))
meanSC=nanmean(SCs,2);
[h p ci stats]= ttest2(meanSC(LowAQsjs),meanSC(HighAQsjs))

[rho p]=corr(meanSC,AqScoresFromRawData')
figure;scatter(meanSC,AqScoresFromRawData')

%% use k-means to assess 'lumpyness' of the most diagnostic feature locations
ClInds=zeros(nSjs,10);
for im=1:10
    im
    for sj=1:nSjs
        Xcrds=squeeze(FtInf.params.ImGabParams(:,5,im));
        Ycrds=squeeze(FtInf.params.ImGabParams(:,6,im));
        [vals inds]=sort(FtDiagnRatingPerSjNorm(sj,:,im),'descend');
        TopFts=inds(1:500);
        WorstFts=inds(501:end);
        TopFtsCrds=[Xcrds(TopFts),Ycrds(TopFts)];
        WorstFtsCrds=[Xcrds(WorstFts),Ycrds(WorstFts)];
        %figure;scatter(TopFtsCrds(:,1),TopFtsCrds(:,2));
        %         kmeans(TopFtsCrds,20);
        crdDistsTop=pdist(TopFtsCrds);
        crdDistsAll=pdist( WorstFtsCrds);
        %         figure;hist(crdDistsTop,50);
        %         figure;hist(crdDistsAll,50);
        ClInds(sj,im)=median(crdDistsAll)-median(crdDistsTop);
    end
end
[h p ci stats]=ttest(ClInds(:))

AQgroupInds=ones(52)*2;
AQgroupInds(1:numel(LowAQsjs),1:numel(LowAQsjs))=1;
AQgroupInds(numel(LowAQsjs)+1:end,numel(LowAQsjs)+1:end)=1;
AQgroupInds(eye(52)==1)=0;
ClIndsRDM=1-corr(ClInds([LowAQsjs,HighAQsjs],:)');
[h p ci stats]=ttest2(ClIndsRDM(AQgroupInds==2),ClIndsRDM(AQgroupInds==1))



figure;imagesc(ClIndsRDM)

avSjClInds=mean(ClInds,2);
[h p ci stats]=ttest2(avSjClInds(HighAQsjs),avSjClInds(LowAQsjs))




%% assess entropy values for individual FDi grids and test if they carry AQ group information
GridN=100;
GridAvFDis=zeros(nSjs,10,GridN,GridN);
for im=1:10
    im
    Xcrds=squeeze(FtInf.params.ImGabParams(:,5,im));
    Ycrds=squeeze(FtInf.params.ImGabParams(:,6,im));
    for x=0:1/GridN:1-(1/GridN)
        for y=0:1/GridN:1-(1/GridN)
            GridFts=find(Xcrds>x&Xcrds<x+(1/GridN)&Ycrds>y&Ycrds<y+(1/GridN));
            if numel(GridFts)>0;
                GridAvFDis(:,im,round(1+(x*GridN)),round(1+(y*GridN)))=mean(FtDiagnRatingPerSjNorm(:,GridFts,im),2);
                % GridAvFDis=[GridAvFDis,mean(FtDiagnRatingPerSjNorm(:,GridFts,im),2)];
            end
        end
    end
end

EntrVals=zeros(nSjs,10);
for sj=1:nSjs
    sj
    for im=1:10
        EntrVals(sj,im)=entropy(squeeze(GridAvFDis(sj,im,:,:)));
    end
end
OL=AqScoresFromRawData==30;
[rho p]=corr(mean(EntrVals,2),AqScoresFromRawData')
figure;scatter(mean(EntrVals(OL==0,:),2),AqScoresFromRawData(OL==0))
[B,STATS] =robustfit(mean(EntrVals(OL==0,:),2),AqScoresFromRawData(OL==0)')
STATS.p(2)

figure;imagesc(EntrVals([LowAQsjs,HighAQsjs],:))
LAQentrVals=EntrVals(LowAQsjs,:);
HAQentrVals=EntrVals(HighAQsjs,:);
[h p ci stats]=ttest2(LAQentrVals(:),HAQentrVals(:))

entrRDM=1-corr([LAQentrVals;HAQentrVals]');
figure;imagesc(entrRDM);

PermPerfMem=zeros(5,1);
for perm=1:5
    sjSel=randperm(27);
    EqObsPerGroupDat=mean([HAQentrVals; LAQentrVals(sjSel(1:25),:)],2);
    %  EqObsPerGroupDat=[EqObsPerGroupDat,[SFmod(HighAQsjs,:);SFmod(LowAQsjs(1:25),:)]];
    % EqObsPerGroupDat=[SFmod(HighAQsjs,:);SFmod(LowAQsjs(1:25),:)];
    
    AqGroupLabels=[-ones(25,1);ones(25,1)];
    perfMem=zeros(5,1);
    for fold=1:5
        testRef=[1:5 26:30]+(5*(fold-1));
        trainref=setxor(1:50,testRef);
        svm=fitcsvm(EqObsPerGroupDat(trainref,:),AqGroupLabels(trainref), 'KernelFunction','linear' );
        class = predict(svm,EqObsPerGroupDat(testRef,:));
        perfMem(fold)=mean(class==AqGroupLabels(testRef));
    end
    PermPerfMem(perm)=mean( perfMem);
    mean( perfMem)
end
mean(PermPerfMem)











%% RSA analysis of between AQ group fingerprint differences, doesn't work....
BetwSjFingRDM=1-corr([FtDiagnRatingPerSjNormVect(LowAQsjs,:);FtDiagnRatingPerSjNormVect(HighAQsjs,:) ]');
BetwSjFingRDM(eye(52)==1)=NaN;
figure; imagesc(BetwSjFingRDM)
AQgroupInds=ones(52)*2;
AQgroupInds(1:numel(LowAQsjs),1:numel(LowAQsjs))=1;
AQgroupInds(numel(LowAQsjs)+1:end,numel(LowAQsjs)+1:end)=1;
AQgroupInds(eye(52)==1)=0;
AQgroupDistDifff=mean(BetwSjFingRDM(AQgroupInds==2))-mean(BetwSjFingRDM(AQgroupInds==1));
[h p ci stats]=ttest2(BetwSjFingRDM(AQgroupInds==2),BetwSjFingRDM(AQgroupInds==1))








%% classify AQ group based on FDi per location bin (20x20 grid)
AqGroupLabels=[ones(25,1);-ones(25,1)];
FDiValsAQgrOrdered=[FtDiagnRatingPerSjNormVect(HighAQsjs,:);FtDiagnRatingPerSjNormVect(LowAQsjs(1:25),:)];

AllXcrds= squeeze(FtInf.params.ImGabParams(:,5,:));
AllYcrds= squeeze(FtInf.params.ImGabParams(:,6,:));
%FDiColorCode= FtDiagnRatingPerSjNormVect(2,:);
%FDiColorCode=FDiColorCode+-min(FDiColorCode);
[vals inds]=sort(FtDiagnRatingPerSjNormVect(52,:));
maxLocs=inds(7001:end);
figure; scatter( AllXcrds(maxLocs), AllYcrds(maxLocs),'filled');


myQPFS
mdl=fscnca(FDiValsAQgrOrdered,AqGroupLabels);




for GridN=2:50;
    GridAvFDis=zeros(nSjs,0);
    tmax=0;
    for im=1:10
        %im
        Xcrds=squeeze(FtInf.params.ImGabParams(:,5,im));
        Ycrds=squeeze(FtInf.params.ImGabParams(:,6,im));
        
        for x=0:1/GridN:1
            for y=0:1/GridN:1
                GridFts=find(Xcrds>x&Xcrds<x+.05&Ycrds>y&Ycrds<y+.05);
                if numel(GridFts)>5;
                    %GridAvFDis(:,im,round(1+(x*GridN)),round(1+(y*GridN)))=mean(FtDiagnRatingPerSjNorm(:,GridFts,im),2);
                    GridAvFDis=[GridAvFDis,mean(FtDiagnRatingPerSjNorm(:,GridFts,im),2)];
                end
            end
        end
    end
    
    corrdists=squareform(1-corrcoef(GridAvFDis'));
    %figure;hist(corrdists,100)
    [h p ci stats]=ttest(1-corrdists);
    if  mean(1-corrdists)>tmax
        tmax=mean(1-corrdists)
        BestGridN=GridN
    end
end








avCoordinateFDiGrid=squeeze(mean(mean(GridAvFDis),2));
figure; imagesc(avCoordinateFDiGrid);


LocGridRDM=1-corr([GridAvFDis(LowAQsjs,:);GridAvFDis(HighAQsjs,:)]');
LocGridRDM(LocGridRDM==0)=NaN;
figure; imagesc(LocGridRDM);




[h p ci stats]=ttest2(GridAvFDis(HighAQsjs,:),GridAvFDis(LowAQsjs,:))
figure;hist(stats.tstat);
PermPerfMem=zeros(5,1);
for perm=1:5
    sjSel=randperm(27);
    % EqObsPerGroupDat=[GridAvFDis(HighAQsjs,:);GridAvFDis(LowAQsjs(sjSel(1:25)),:)];
    EqObsPerGroupDat=[FDiPerBinAndSj(HighAQsjs,:); FDiPerBinAndSj(LowAQsjs(sjSel(1:25)),:)];
    
    
    %EqObsPerGroupDat=[FtDiagnRatingPerSjNormVect(HighAQsjs,:);Qualcomm(LowAQsjs(sjSel(1:25)),:)];
    %EqObsPerGroupDat=[FtDiagnRatingPerSj(HighAQsjs,:);FtDiagnRatingPerSj(LowAQsjs(3:end),:)];
    AqGroupLabels=[-ones(25,1);ones(25,1)];
    perfMem=zeros(5,1);
    for fold=1:5
        testRef=[1:5 26:30]+(5*(fold-1));
        trainref=setxor(1:50,testRef);
        svm=fitcsvm(EqObsPerGroupDat(trainref,:),AqGroupLabels(trainref), 'KernelFunction','linear' );
        class = predict(svm,EqObsPerGroupDat(testRef,:));
        perfMem(fold)=mean(class==AqGroupLabels(testRef));
    end
    PermPerfMem(perm)=mean( perfMem);
    mean( perfMem)
end
mean(PermPerfMem)




%% SVM based on SF bin data

[vals inds]=sort(AqScoresFromRawData);

Lowest20AQsjs=inds(1:10);
Highest20AQsjs=inds(end-9:end);
EqObsPerGroupDat=[SFmod(Lowest20AQsjs,:);SFmod(Highest20AQsjs,:)];
%EqObsPerGroupDat=[FtDiagnRatingPerSjNormVect(HighAQsjs,:);Qualcomm(LowAQsjs(sjSel(1:25)),:)];
%EqObsPerGroupDat=[FtDiagnRatingPerSj(HighAQsjs,:);FtDiagnRatingPerSj(LowAQsjs(3:end),:)];
AqGroupLabels=[-ones(20,1);ones(20,1)];
perfMem=zeros(5,1);
for fold=1:2
    testRef=[1:5 11:15]+(5*(fold-1));
    trainref=setxor(1:20,testRef);
    svm=fitcsvm(EqObsPerGroupDat(trainref,:),AqGroupLabels(trainref), 'KernelFunction','linear' );
    class = predict(svm,EqObsPerGroupDat(testRef,:));
    perfMem(fold)=mean(class==AqGroupLabels(testRef));
end
mean(perfMem)






[COEFF, SCORE]=pca(FtDiagnRatingPerSjNormVect,'Economy',true )


PermPerfMem=zeros(100,1);
for perm=1:100
    sjSel=randperm(27);
    % EqObsPerGroupDat=[FDiPerBinAndSj(HighAQsjs,[1   5]);FDiPerBinAndSj(LowAQsjs(sjSel(1:25)),[1  5])];
    EqObsPerGroupDat=[SFmod(HighAQsjs);SFmod(LowAQsjs(sjSel(1:25)))];
    % EqObsPerGroupDat=[SCORE(HighAQsjs,:);SCORE(LowAQsjs(sjSel(1:25)),:)];
    
    
    
    %EqObsPerGroupDat=[FtDiagnRatingPerSjNormVect(HighAQsjs,:);Qualcomm(LowAQsjs(sjSel(1:25)),:)];
    %EqObsPerGroupDat=[FtDiagnRatingPerSj(HighAQsjs,:);FtDiagnRatingPerSj(LowAQsjs(3:end),:)];
    AqGroupLabels=[-ones(25,1);ones(25,1)];
    perfMem=zeros(4,1);
    for fold=1:5
        testRef=[1:5 26:30]+(5*(fold-1));
        trainref=setxor(1:50,testRef);
        svm=fitcsvm(EqObsPerGroupDat(trainref,:),AqGroupLabels(trainref), 'KernelFunction','linear' );
        class = predict(svm,EqObsPerGroupDat(testRef,:));
        perfMem(fold)=mean(class==AqGroupLabels(testRef));
    end
    PermPerfMem(perm)=mean( perfMem);
    PermPerfMem(perm)
end
mean(PermPerfMem)


PermPerfMem=zeros(100,1);
for perm=1:100
    
    sjSel=randperm(27);
    EqObsPerGroupDat=[SFmod(HighAQsjs);SFmod(LowAQsjs(sjSel(1:25)))];
    %EqObsPerGroupDat=[FtDiagnRatingPerSjNormVect(HighAQsjs,:);FtDiagnRatingPerSjNormVect(LowAQsjs(sjSel(1:25)),:)];
    %EqObsPerGroupDat=[FtDiagnRatingPerSj(HighAQsjs,:);FtDiagnRatingPerSj(LowAQsjs(3:end),:)];
    AqGroupLabels=[-ones(25,1);ones(25,1)];
    perfMem=zeros(5,1);
    for fold=1:5
        testRef=[1:5 26:30]+(5*(fold-1));
        trainref=setxor(1:50,testRef);
        svm=fitcsvm(EqObsPerGroupDat(trainref,:),AqGroupLabels(trainref), 'KernelFunction','linear' );
        class = predict(svm,EqObsPerGroupDat(testRef,:));
        perfMem(fold)=mean(class==AqGroupLabels(testRef));
    end
    PermPerfMem(perm)=mean( perfMem);
end
mean(PermPerfMem)

% perm control
PermPerfMem=zeros(100,1);
for perm=1:100
    
    sjSel=randperm(27);
    EqObsPerGroupDat=[SFmod(HighAQsjs);SFmod(LowAQsjs(sjSel(1:25)))];
    %EqObsPerGroupDat=[FtDiagnRatingPerSjNormVect(HighAQsjs,:);FtDiagnRatingPerSjNormVect(LowAQsjs(sjSel(1:25)),:)];
    %EqObsPerGroupDat=[FtDiagnRatingPerSj(HighAQsjs,:);FtDiagnRatingPerSj(LowAQsjs(3:end),:)];
    AqGroupLabels=[-ones(25,1);ones(25,1)];
    EqObsPerGroupDat=EqObsPerGroupDat(randperm(50),:);
    perfMem=zeros(5,1);
    for fold=1:5
        testRef=[1:5 26:30]+(5*(fold-1));
        trainref=setxor(1:50,testRef);
        svm=fitcsvm(EqObsPerGroupDat(trainref,:),AqGroupLabels(trainref), 'KernelFunction','linear' );
        class = predict(svm,EqObsPerGroupDat(testRef,:));
        perfMem(fold)=mean(class==AqGroupLabels(testRef));
    end
    PermPerfMem(perm)=mean( perfMem);
end
mean(PermPerfMem)







